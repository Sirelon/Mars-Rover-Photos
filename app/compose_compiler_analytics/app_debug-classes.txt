unstable class ImagesDao_Impl {
  unstable val __db: RoomDatabase
  unstable val __insertAdapterOfMarsImage: EntityInsertAdapter<MarsImage>
  unstable val __updateAdapterOfMarsImage: EntityDeleteOrUpdateAdapter<MarsImage>
  unstable val __updateAdapterOfStatsUpdateAsMarsImage: EntityDeleteOrUpdateAdapter<StatsUpdate>
  <runtime stability> = Unstable
}
unstable class DataManager {
  unstable val context: Context
  runtime val tracker: ITracker
  runtime val roverRepo: RoversRepository
  unstable val imagesRepo: ImagesRepository
  runtime val photosRepo: PhotosRepository
  unstable val rovers: Flow<List<Rover>>
  unstable val exceptionHandler: CoroutineExceptionHandler
  <runtime stability> = Unstable
}
unstable class RoverApplication {
  stable val adEnabled: Boolean
  unstable val tracker$delegate: Lazy<FirebaseTracker>
  unstable val dataManger$delegate: Lazy<DataManager>
  <runtime stability> = Unstable
}
unstable class FavoriteImagesViewModel {
  unstable val exceptionHandler: CoroutineExceptionHandler
  unstable val repository: ImagesRepository
  unstable val favoriteImagesFlow: Flow<PagingData<MarsImage>>
  <runtime stability> = Unstable
}
unstable class GdprHelper {
  unstable val activity: Activity
  unstable val consentInformation$delegate: Lazy<@[FlexibleNullability] ConsentInformation?>
  unstable val acceptGdpr: MutableStateFlow<Boolean>
  <runtime stability> = Unstable
}
unstable class ImageViewModel {
  unstable var $$delegate_0: FullscreenImageTracker
  unstable val IO: CoroutineContext
  unstable val repository: ImagesRepository
  unstable val idsEmitor: MutableStateFlow<List<String>>
  unstable val uiEventEmitter: Channel<UiEvent>
  unstable val uiEvent: Flow<UiEvent>
  stable var shouldTrack: Boolean
  unstable val hideUiEmitter: MutableStateFlow<Boolean>
  unstable val imagesFlow: Flow<ImmutableList<MarsImage>>
  unstable val screenState: StateFlow<ImageScreenState>
  unstable val appUrl$delegate: Lazy<String>
  <runtime stability> = Unstable
}
stable class PhotoSaved {
  stable val imagePath: String?
  <runtime stability> = Stable
}
stable class UiEvent {
  <runtime stability> = Stable
}
runtime class ImageScreenState {
  runtime val images: ImmutableList<MarsImage>
  stable val hideUi: Boolean
  <runtime stability> = Runtime(MarsImage)
}
unstable class ImagesRepository {
  unstable val context: Context
  runtime val imagesDao: ImagesDao
  stable val firestorePhotos: FirestorePhotos
  <runtime stability> = Unstable
}
unstable class PhotosViewModel {
  unstable val dataManger: DataManager
  runtime val roversRepository: RoversRepository
  runtime val photosRepository: PhotosRepository
  unstable val imagesRepository: ImagesRepository
  unstable val queryEmitter: MutableStateFlow<PhotosQueryRequest?>
  unstable val roverIdEmitter: MutableStateFlow<Long?>
  unstable var dateUtil: RoverDateUtil?
  unstable val roverFlow: Flow<Rover>
  unstable val photosFlow: Flow<List<MarsImage>?>
  unstable val solFlow: Flow<Long>
  <runtime stability> = Unstable
}
unstable class PopularPhotosViewModel {
  unstable val imagesRepository: ImagesRepository
  unstable val popularPhotos: Flow<PagingData<MarsImage>>
  <runtime stability> = Unstable
}
unstable class RoversActivity {
  unstable val gdprHelper: GdprHelper
  unstable var adView: AdView
  <runtime stability> = Unstable
}
stable class Rovers {
  <runtime stability> = Stable
}
stable class Favorite {
  <runtime stability> = Stable
}
stable class Popular {
  <runtime stability> = Stable
}
stable class About {
  <runtime stability> = Stable
}
stable class Rover {
  stable val id: Long
  <runtime stability> = Stable
}
stable class Ukraine {
  <runtime stability> = Stable
}
stable class Screen {
  stable val route: String
  stable val iconCreator: Function2<Composer, Int, ImageVector>
  <runtime stability> = Stable
}
runtime class RoversRepository {
  runtime val api: RestApi
  runtime val roverDao: RoverDao
  <runtime stability> = Runtime(RestApi)
}
unstable class $serializer {
  unstable val descriptor: SerialDescriptor
  <runtime stability> = Unstable
}
stable class Rover {
  stable val id: Long
  stable val name: String
  stable val drawableName: String
  stable val landingDate: String
  stable val launchDate: String
  stable val status: String
  stable var maxSol: Long
  stable var maxDate: String
  stable val totalPhotos: Int
}
unstable class RoverDateUtil {
  stable val rover: Rover
  unstable val simpleDateFormat: SimpleDateFormat
  stable val SOL_TO_DAY_OFFSET: Double
  unstable val _roverLastDate$delegate: Lazy<Long>
  unstable val _roverLandingDate$delegate: Lazy<Long>
  <runtime stability> = Unstable
}
unstable class AppDataBase {
  <runtime stability> = Unstable
}
unstable class DataBaseProvider {
  unstable var dataBase: AppDataBase
  <runtime stability> = Unstable
}
unstable class Prefs {
  unstable var sharedPreferences: SharedPreferences
  unstable val themeLiveData: MutableStateFlow<Theme>
  <runtime stability> = Unstable
}
unstable class FirebaseTracker {
  unstable val fb: FirebaseAnalytics
  <runtime stability> = Unstable
}
unstable class FullscreenImageTracker {
  runtime val tracker: ITracker
  unstable val dataManager: DataManager
  runtime val scrollChangeCollector: DataFlowCollector<Float>
  runtime val zoomChangeCollector: DataFlowCollector<Triple<Float, Float, Float>>
  runtime var currentImage: MarsImage?
  <runtime stability> = Unstable
}
