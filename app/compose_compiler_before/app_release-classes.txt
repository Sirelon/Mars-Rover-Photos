unstable class AppDataBase_Impl {
  unstable val _roverDao: Lazy<RoverDao>
  unstable val _imagesDao: Lazy<ImagesDao>
  <runtime stability> = Unstable
}
unstable class ImagesDao_Impl {
  unstable val __db: RoomDatabase
  unstable val __insertionAdapterOfMarsImage: EntityInsertionAdapter<MarsImage>
  unstable val __updateAdapterOfMarsImage: EntityDeletionOrUpdateAdapter<MarsImage>
  unstable val __updateAdapterOfStatsUpdateAsMarsImage: EntityDeletionOrUpdateAdapter<StatsUpdate>
  unstable val __preparedStmtOfUpdateFavorite: SharedSQLiteStatement
  unstable val __preparedStmtOfDeleteAllPopular: SharedSQLiteStatement
  <runtime stability> = Unstable
}
unstable class RoverDao_Impl {
  unstable val __db: RoomDatabase
  unstable val __insertionAdapterOfRover: EntityInsertionAdapter<Rover>
  unstable val __preparedStmtOfUpdateRoverCountPhotos: SharedSQLiteStatement
  unstable val __preparedStmtOfUpdateRover: SharedSQLiteStatement
  <runtime stability> = Unstable
}
unstable class DataManager {
  unstable val context: Context
  runtime val tracker: ITracker
  unstable val roverRepo: RoversRepository
  unstable val imagesRepo: ImagesRepository
  unstable val photosRepo: PhotosRepository
  unstable val rovers: Flow<List<Rover>>
  unstable val exceptionHandler: CoroutineExceptionHandler
  <runtime stability> = Unstable
}
unstable class RoverApplication {
  stable val adEnabled: Boolean
  unstable val tracker$delegate: Lazy<FirebaseTracker>
  unstable val dataManger$delegate: Lazy<DataManager>
  <runtime stability> = Unstable
}
unstable class FavoriteImagesViewModel {
  unstable val exceptionHandler: CoroutineExceptionHandler
  unstable val repository: ImagesRepository
  unstable val favoriteImagesFlow: Flow<PagingData<MarsImage>>
  <runtime stability> = Unstable
}
stable class FirebaseConstants {
  stable val PHOTOS_TABLE: String
  stable val COLECTION_PHOTOS: String
  stable val COLECTION_ROVERS: String
  stable val DOCUMENT_INSIGHT: String
  stable val PHOTO_ID: String
  stable val PHOTO_SOL: String
  stable val PHOTOS_IMAGE: String
  stable val PHOTOS_EARTH_DATE: String
  stable val PHOTOS_SEEN: String
  stable val PHOTOS_SCALE: String
  stable val PHOTOS_SAVE: String
  stable val PHOTOS_SHARE: String
  <runtime stability> = Stable
}
unstable class FirebasePhoto {
  stable val id: String
  stable val sol: Long
  stable val name: String
  stable val imageUrl: String
  stable val earthDate: String
  stable var seeCounter: Long
  stable var favoriteCounter: Long
  stable var scaleCounter: Long
  stable var saveCounter: Long
  stable var shareCounter: Long
  <runtime stability> = Unstable
}
unstable class GdprHelper {
  unstable val activity: Activity
  unstable val consentInformation$delegate: Lazy<@[FlexibleNullability] ConsentInformation?>
  unstable val acceptGdpr: MutableStateFlow<Boolean>
  <runtime stability> = Unstable
}
unstable class ImageViewModel {
  unstable var $$delegate_0: FullscreenImageTracker
  unstable val IO: CoroutineContext
  unstable val repository: ImagesRepository
  unstable val idsEmitor: MutableStateFlow<List<String>>
  unstable val uiEventEmitter: Channel<UiEvent>
  unstable val uiEvent: Flow<UiEvent>
  stable var shouldTrack: Boolean
  unstable val hideUiEmitter: MutableStateFlow<Boolean>
  unstable val imagesFlow: Flow<ImmutableList<MarsImage>>
  unstable val screenState: StateFlow<ImageScreenState>
  unstable val appUrl$delegate: Lazy<String>
  <runtime stability> = Unstable
}
stable class PhotoSaved {
  stable val imagePath: String?
  <runtime stability> = Stable
}
stable class UiEvent {
  <runtime stability> = Stable
}
stable class ImageScreenState {
  stable val images: ImmutableList<MarsImage>
  stable val hideUi: Boolean
  <runtime stability> = 
}
unstable class ImagesRepository {
  unstable val context: Context
  runtime val imagesDao: ImagesDao
  stable val firestorePhotos: FirestorePhotos
  <runtime stability> = Unstable
}
unstable class PhotosRepository {
  unstable val api: RestApi
  <runtime stability> = Unstable
}
unstable class PhotosViewModel {
  unstable val dataManger: DataManager
  unstable val roversRepository: RoversRepository
  unstable val photosRepository: PhotosRepository
  unstable val imagesRepository: ImagesRepository
  unstable val queryEmitter: MutableStateFlow<PhotosQueryRequest?>
  unstable val roverIdEmitter: MutableStateFlow<Long?>
  unstable var dateUtil: RoverDateUtil?
  unstable val roverFlow: Flow<Rover>
  unstable val photosFlow: Flow<List<MarsImage>?>
  unstable val solFlow: Flow<Long>
  <runtime stability> = Unstable
}
stable class PopularRemoteMediator {
  runtime val firebasePhotos: IFirebasePhotos
  runtime val dao: ImagesDao
  <runtime stability> = 
}
unstable class PopularPhotosViewModel {
  unstable val imagesRepository: ImagesRepository
  unstable val popularPhotos: Flow<PagingData<MarsImage>>
  <runtime stability> = Unstable
}
unstable class RoversActivity {
  unstable val gdprHelper: GdprHelper
  unstable var adView: AdView
  <runtime stability> = Unstable
}
stable class Rovers {
  <runtime stability> = Stable
}
stable class Favorite {
  <runtime stability> = Stable
}
stable class Popular {
  <runtime stability> = Stable
}
stable class About {
  <runtime stability> = Stable
}
stable class Rover {
  stable val id: Long
  <runtime stability> = Stable
}
stable class Ukraine {
  <runtime stability> = Stable
}
stable class Screen {
  stable val route: String
  stable val iconCreator: @[Composable] Function0<ImageVector>
  <runtime stability> = Stable
}
unstable class RoversRepository {
  unstable val api: RestApi
  runtime val roverDao: RoverDao
  <runtime stability> = Unstable
}
unstable class FirebaseProvider {
  unstable val firebasePhotos$delegate: Lazy<FirestorePhotos>
  <runtime stability> = Unstable
}
stable class FirestorePhotos {
  <runtime stability> = Stable
}
stable class $serializer {
  <runtime stability> = Stable
}
stable class MarsPhoto {
  stable val id: String
  stable val sol: Long
  stable val name: String?
  stable val imageUrl: String
  stable val earthDate: String
  stable val camera: RoverCamera?
  <runtime stability> = Stable
}
stable class PhotosQueryRequest {
  stable val roverId: Long
  stable val sol: Long
  stable val camera: String?
  <runtime stability> = Stable
}
stable class $serializer {
  <runtime stability> = Stable
}
unstable class Rover {
  stable val id: Long
  stable val name: String
  stable val drawableName: String
  stable val landingDate: String
  stable val launchDate: String
  stable val status: String
  stable var maxSol: Long
  stable var maxDate: String
  stable val totalPhotos: Int
  <runtime stability> = Unstable
}
stable class $serializer {
  <runtime stability> = Stable
}
stable class RoverCamera {
  stable val id: Int
  stable val name: String
  stable val fullName: String
  <runtime stability> = Stable
}
unstable class RoverDateUtil {
  unstable val rover: Rover
  unstable val simpleDateFormat: SimpleDateFormat
  stable val SOL_TO_DAY_OFFSET: Double
  unstable val _roverLastDate$delegate: Lazy<Long>
  unstable val _roverLandingDate$delegate: Lazy<Long>
  <runtime stability> = Unstable
}
unstable class NasaApi {
  unstable val ktor: HttpClient
  <runtime stability> = Unstable
}
stable class $serializer {
  <runtime stability> = Stable
}
unstable class PhotosResponse {
  unstable val list: List<MarsPhoto>
  <runtime stability> = Unstable
}
stable class $serializer {
  <runtime stability> = Stable
}
unstable class PerseverancePhotosResponse {
  unstable val photos: List<PerseverancePhotoItemResponse>
  stable val totalImages: Long?
  <runtime stability> = Unstable
}
stable class $serializer {
  <runtime stability> = Stable
}
stable class PerseverancePhotoItemResponse {
  stable val id: String
  stable val sol: Long
  stable val name: String?
  stable val description: String?
  stable val credit: String?
  stable val imageSourceResponse: ImageSourceResponse?
  stable val earthDate: String?
  stable val camera: PerseveranceCameraResponse?
  <runtime stability> = Stable
}
stable class $serializer {
  <runtime stability> = Stable
}
stable class PerseveranceCameraResponse {
  stable val id: String
  stable val name: String
  stable val fullName: String
  <runtime stability> = Stable
}
stable class $serializer {
  <runtime stability> = Stable
}
stable class ImageSourceResponse {
  stable val medium: String?
  stable val small: String?
  stable val full_res: String?
  stable val large: String?
  <runtime stability> = Stable
}
unstable class RestApi {
  unstable val _perseveranceTotalImages: MutableStateFlow<Long?>
  unstable val perseveranceTotalImages: Flow<Long>
  unstable val json: Json
  unstable val ktor: HttpClient
  unstable val nasaApi: NasaApi
  <runtime stability> = Unstable
}
stable class $serializer {
  <runtime stability> = Stable
}
unstable class RoverResponse {
  unstable var roverInfo: RoverInfo
  <runtime stability> = Unstable
}
stable class $serializer {
  <runtime stability> = Stable
}
unstable class RoverInfo {
  stable var name: String
  stable var landingDate: String
  stable var launchDate: String
  stable var status: String
  stable var maxSol: Long
  stable var maxDate: String
  stable var totalPhotos: Int
  <runtime stability> = Unstable
}
stable class AppDataBase {
  <runtime stability> = Stable
}
unstable class DataBaseProvider {
  stable var dataBase: AppDataBase
  <runtime stability> = Unstable
}
stable class Stats {
  stable val see: Long
  stable val scale: Long
  stable val save: Long
  stable val share: Long
  stable val favorite: Long
  <runtime stability> = Stable
}
stable class MarsImage {
  stable val id: String
  stable val order: Int
  stable val sol: Long
  stable val name: String?
  stable val imageUrl: String
  stable val earthDate: String
  stable val camera: RoverCamera?
  stable val favorite: Boolean
  stable val popular: Boolean
  stable val stats: Stats
  <runtime stability> = Stable
}
stable class StatsUpdate {
  stable val id: String
  stable val stats: Stats
  <runtime stability> = Stable
}
unstable class Prefs {
  unstable var sharedPreferences: SharedPreferences
  unstable val themeLiveData: MutableStateFlow<Theme>
  <runtime stability> = Unstable
}
unstable class DataFlowCollector {
  unstable val flow: MutableStateFlow<T?>
  <runtime stability> = Unstable
}
unstable class FirebaseTracker {
  unstable val fb: FirebaseAnalytics
  <runtime stability> = Unstable
}
unstable class FullscreenImageTracker {
  runtime val tracker: ITracker
  unstable val dataManager: DataManager
  unstable val scrollChangeCollector: DataFlowCollector<Float>
  unstable val zoomChangeCollector: DataFlowCollector<Triple<Float, Float, Float>>
  stable var currentImage: MarsImage?
  <runtime stability> = Unstable
}
